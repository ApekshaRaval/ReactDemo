                        ----functional component---
import React from  'react';

                        ----arrow function---
const Greet = () => <h1>Hello Appu</h1>

--use of props---
function Greet (props){
    return <h1> Hello {props.name}</h1>
}
export default Greet;

                        --- destructuring props---
const Greet = ({name}) => {
    return (
        <>
            <h1>Hello {name}</h1>
        </>
    )
}

const Greet = (props) => {
    const {name} =props
    return (
        <>
            <h1>Hello {name}</h1>
        </>
    )
}







                        ---- class component------
import React,{Component} from 'react' ;

class Greet  extends Component{
    render(){
        return <h1>Hello  {this.props.name}</h1>
    }

        -----destructuring of props----
    render(){
        const {name} = this.props
        return(
            <h1>Hello {name}</h1>
        )

    }
}
export default Greet;

                            ---use of state----
class Greet1  extends Component{
    constructor(){
        super()
        this.state={
            count:0
        }
    }
    // setState method use two parameters 1 = object , 2 = callback function
    increment()
    {
                       ---- thi for one increment-----
        this.setState({
            count:this.state.count+1
         },()=>{
           console.log(this.state.count)
         })

                         ---this for multiple increment----
        this.setState((prevState) => ({
            count :prevState.count +1
        }))
        console.log(this.state.count)
    }
    incrementMore(){
        this.increment()
        this.increment()   
    }
    render(){
        return(
            <>
            <div>
           <h1>count - {this.state.count}</h1>
           <button onClick={()=>this.incrementMore()}>Increment</button>
           </div>
           </>
        ) 
    }
}
                               ------method as a props------
parent class:

class Greet1  extends Component{
constructor(props){
    super(props)
    this.state={
        parentName: "parent"
    }
}
// setState method use two parameters 1 = object , 2 = callback function

greetParent=(childName)=>{
  alert(`hello ${this.state.parentName } from ${childName}`)
    
}
render(){
    return(
        <>
       <Greet greetHandler={this.greetParent}/>
    
      
       </>
    ) 
}
}
export default Greet1 ;

child class:

const Greet = (props) => {

       return (
           <>
             
               <button onClick={()=>props.greetHandler('child')}>Greet Parent</button>
           </>
       )
   }

export default  Greet ;

                              ---map method---
const List = () => {
   
    const name1 = [
        { id:1,firstName:"John", lastName:"Doe", age:55, eyeColor:"blue"}, 
        {id:2,firstName:"clark", lastName:"sparse", age:30, eyeColor:"black"}
    ]
const list = name1.map(name1 => <Greet  key={name1.id} name1={name1}/>)
in Greet.js we write link this to run upper code    
const Greet = ({name1}) => {
       return (
           <>
           
             <h2> {name1.firstName} {name1.lastName} {name1.age} </h2>
               {/* <button onClick={()=>props.greetHandler('child')}>Greet Parent</button> */}
           </>
       )
   }
export default  Greet ;

     const list = name1.map(name1 => <h2>{name1.firstName} {name1.lastName} {name1.age}</h2>) 
     const name = ['apeksha','appu','apexa']
     const list = name.map((name,index )=> <h2 key={index} >{index}{name}</h2>)
    
    return (
        <>
            <div>
                {list}
            </div>
        </>
    )
}

export default List    

                       ------css module file-----
style.module.css file can be accessbile  in  imported file only
<h1 className={styles.error}>error</h1>

                           -----Refs method----
class Form extends Component {
    constructor(props) {
        super(props)
        this.inputRef = React.createRef()
        this.cbRef = null
        this.cbRef = (element)=>{
            this.cbRef = element
        }
        
    }
    componentDidMount(){
        // this.inputRef.current.focus()
        // console.log(this.inputRef)
        if(this.cbRef){
            this.cbRef.focus()
        }
    }
    clickHandler=()=>{
        alert(this.inputRef.current.value)
    }
    render() {
        return (
            <form>
                <div>
                  <label>Username</label>
                  {/* <input type="text"  ref={this.inputRef} value={this.state.username}
                  onChange={this.handleUsername}/> */}
                 <input type="text"  ref={this.inputRef} />
                 <input type="text"  ref={this.cbRef} />
                </div>
                <button onClick={this.clickHandler}>Submit</button>
            </form>

        )
    }
}
export default Form

                        -----error boundry----
import React, { Component } from 'react'

 class ErrorBoundry extends Component {
    constructor(props){
        super(props)
        this.state= {
            hasError: false
        }
    }
   
      static getDerivedStateFromError(error)
    {
      return{
    hasError:true
     }
    }
    componentDidCatch(error,info){
      console.log(error)
      console.log(info)
    }
    
  render() 
  {
    if(this.state.hasError){
      return <h1>Something went wrong</h1>
    }
    return  this.props.children
  }
}

export default ErrorBoundry

-----this is the file which gives error--------
import React from 'react'

const Hero = ({heroName}) => {
    if(heroName==='joker'){
        throw new Error('Opps Not a Hero') 
    }
  return (
    <div>
       {heroName}
    </div>
  )
}

export default Hero
----is our App.js where we wrape the errored component in errorboundry componenet----
function App() {
  return (
    <div className="App">
    <ErrorBoundry>
    < Hero heroName='Batman' />
    < Hero heroName='joker' />
    </ErrorBoundry>
    </div>
  );
}

import React, { Component } from 'react'

class ClickCounter extends Component {
    constructor(props) {
        super(props)

        this.state = {
            count: 0
        }
    }
    incrementCount = () => {
        this.setState(prevState => {
            return {
                count: prevState.count + 1
            }
        })
    }

    render() {
        const { count,incrementCount } = this.props
        return (
            <div>
            --------click counter---------
                <button onClick={incrementCount}> Clicked {count} times</button>
                ------hover counter--------
              <button onMouseOver={incrementCount}>Hover{count} times</button>
            </div>
        )
    }
}

export default ClickCounter


                       ------form handling method----------
                             ------post method--------
//class Component                             
import React, { Component } from 'react'
import axios from 'axios'

class PostForm extends Component {
    constructor(props) {
        super(props)

        this.state = {
            userId: '',
            title: '',
            body: ''
        }
    }
changeHandler = (e) => {

    this.setState({ [e.target.name]: e.target.value })
}
submitHandler=(e)=>{
    e.preventDefault();
    console.log(this.state)
    axios.post('https://jsonplaceholder.typicode.com/posts',this.state)
    .then(response=>{
        console.log(response)

    })
    .catch(error=>{
        console.log(error)

})
}

    render() {
        const { userId, title, body } = this.state
        return (
<>
    <form onSubmit={this.submitHandler}>
        <div>
            <input
                type="text"
                name="userId"
                value={userId}
                onChange={this.changeHandler}
            />
        </div>
        <div>
            <input
                type="text"
                name="title"
                value={title}
                onChange={this.changeHandler}
            />
        </div>
        <div>
            <input
                type="text"
                name="body"
                value={body}
                onChange={this.changeHandler}
            />
        </div>
        <button type="submit">Submit</button>
    </form>
</>
        )
    }
}

export default PostForm


//functional component

import React, { useState } from 'react'
import axios from 'axios'

const PostForm = () => {
    const [data, setData] = useState({});


    const changeHandler = (e) => {

        setData({ ...data, [e.target.name]: e.target.value })
    }
    const submitHandler = (e) => {
        e.preventDefault();

        axios.post('https://jsonplaceholder.typicode.com/posts', data)
            .then(response => {
                console.log(response)

            })
            .catch(error => {
                console.log(error)

            })
    }
    return (
        <>
            <form onSubmit={submitHandler}>
                <div>
                    <input
                        type="text"
                        name="userId"
                        onChange={changeHandler}
                    />
                </div>
                <div>
                    <input
                        type="text"
                        name="title"
                        onChange={changeHandler}
                    />
                </div>
                <div>
                    <input
                        type="text"
                        name="body"
                        onChange={changeHandler}
                    />
                </div>
                <button type="submit">Submit</button>
            </form>
            <div>
                <h2>UserId :{data.userId}</h2>
                <h2>Title :{data.title}</h2>
                <h2>Body :{data.body}</h2>
            </div>
        </>
    )
}

export default PostForm

                         -----get method-------

import React, { Component } from 'react'
import axios from 'axios'

class PostList extends Component {
    constructor(props) {
      super(props)
    
      this.state = {
         posts:[],
         errorMsg:""
      }
    }
    componentDidMount(){
        axios.get('https://jsonplaceholder.typicode.com/posts')
        .then(response=>{
            console.log(response)
            this.setState({posts:response.data})
        })
        .catch(error=>{
            console.log(error)
            this.setState({errorMsg:'Error retreving data'})})
    }
  render() {
    const {posts,errorMsg}= this.state
    return (
      <div>
        List Of Post{
            posts.length?
            posts.map(post=><div key={post.id}>{post.title}</div>):null
        }
        {errorMsg? <div>{errorMsg}</div>:null}
      </div>
    )
  }
}

export default PostList
 
                        ------lifecycle method------- 
                        
import React, { Component } from 'react'

export class LifeCycle extends Component {
    constructor() {
      super()
      this.state={
        data:null,
        active:null,
        who:null
      }
    console.log("constructor")
     
    }
    componentDidUpdate(){
    console.log("componentDidUpdate")
    //  if(this.setState.who==null)
    //  {
    //     this.setState({who:"Apeksha"})
    //  }   
    // this.setState({who:"Apeksha"}) //this gives error
    }

    componentDidMount(){
        this.setState({data:"updated"})
        console.log("componentDidMount")
    }
  
  render() 
  {console.log("render")
    return (
      <div>
        <h1>{this.state.who}</h1>
        <button onClick={()=>{this.setState({active:"yes"})}}>Activate</button>
      </div>
    )
  }
}

export default LifeCycle



                            -------useContext------
//this is one method using context
import React from 'react'
import { UserContext,ChannelContext } from '../App'
const ComponentF = () => {
  return (<>
    <div>
        <UserContext.Consumer>
    {
        name =>{
            return(
                <ChannelContext.Consumer>
                    {
                     channel =>{
                        return<div>user context value {name},user Channel value {channel}</div>
                     }   
                    }
                </ChannelContext.Consumer>
            )
        }
    }
      </UserContext.Consumer>
    </div>
    </>
  )
}

export default ComponentF


//main method code 
import React from "react"
import './App.css';
import ComponentC from './Components/ComponentC';




export const UserContext = React.createContext()
export const ChannelContext = React.createContext()

function App() {
  return (
    <div className="App">
<UserContext.Provider value={'Apeksha'}>
  <ChannelContext.Provider value={'myChannel'}>
  <ComponentC/>
  </ChannelContext.Provider>
 
  </UserContext.Provider>
    </div>
  );
}

export default App;

//2nd method using useContext hook

import React,{useContext} from 'react'
import ComponentF from './ComponentF'
import { UserContext,ChannelContext } from '../App'
const ComponentE = () => {
  const user = useContext(UserContext)
   const channel = useContext(ChannelContext)
  return (
    <div>
      {user} -{channel}
    </div>
  )
}

export default ComponentE

                               ----useState Hook------     

 import React,{useState} from 'react'
 
 const PostForm = () => {
    const [items,setItems] = useState([])
    const addItem=()=>{
        setItems([...items,{
            id:items.length,
            value:Math.floor(Math.random()*10)+1
        }
     
        ])
    }
   return (
    <>
     <div>
        <button onClick={addItem}>Add a Number</button>
        <ul>
       {
        items.map(item=><li key={item.id}>{item.value}</li>)
       }
       </ul>
     </div>
     </>
   )
 }
 
 export default PostForm

                           ------useEffect-------

import React, { useState, useEffect } from 'react'

const UseEffect = () => {
    const [count, setCount] = useState(0)
    const [name, setName] = useState('')

    useEffect(() => {
        console.log("updated")
        document.title = `Clicked ${count} times`
    }, [count])

    return (
        <div>
            <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
            <button onClick={() => setCount(count + 1)}>click {count} times</button>
        </div>
    )
}

export default UseEffect

                       -----useReducer-----
             ----- for local state management----

import React,{useReducer} from 'react'

const initialState=0
const reducer=(state,action)=>{
switch(action){
    case 'increment':
        return state + 1
        case 'decrement':
            return state - 1
            case 'reset':
                return initialState
                default:
                    return state
}
}

const CounterOne = () => {
    const [count,dispatch] = useReducer(reducer,initialState)
  return (
    <div>
        <div>count - {count}</div>
      <button onClick={()=>dispatch('increment')}>Increment</button>
      <button  onClick={()=>dispatch('decrement')}>Decrement</button>
      <button  onClick={()=>dispatch('reset')}>Reset</button>
    </div>
  )
}

export default CounterOne


//state as a object
import React,{useReducer} from 'react'

const initialState={
    firstCounter :0,
    secondCounter:10
}

 const reducer=(state,action)=>{
    switch(action.type){
        case 'increment':
            return {...state,firstCounter: state.firstCounter + action.value}
            case 'decrement':
            return {...state,firstCounter: state.firstCounter - action.value}
            case 'increment2':
            return {...state,secondCounter: state.secondCounter + action.value}
            case 'decrement2':
            return {...state,firstCounter: state.secondCounter - action.value}
            case 'reset':
            return initialState
            default:
                return state
    }

 }


const CounterOne = () => {

const[count,dispatch]=useReducer(reducer,initialState)
  return (
    <>
    <div>First count - {count.firstCounter}</div>
    <div>Second count - {count.secondCounter}</div>
    <div>
      <button onClick={()=>dispatch({type:'increment',value:1})}>Increment</button>
      <button onClick={()=>dispatch({type:'decrement',value:1})}>Decrement</button>
      <button onClick={()=>dispatch({type:'increment',value:5})}>Increment5</button>
      <button onClick={()=>dispatch({type:'decrement',value:5})}>Decrement5</button>
      <button onClick={()=>dispatch({type:'reset'})}>Reset</button>
    </div>
    <div>
              
      <button onClick={()=>dispatch({type:'increment2',value:1})}>Increment counter2</button>
      <button onClick={()=>dispatch({type:'decrement2',value:1})}>Decrement counter2</button>
    </div>
    </>
  )
}

export default CounterOne

//for multiple counter use more than one useReducer
import React,{useReducer} from 'react'

const initialState=0



const reducer=(state,action)=>{
    switch(action.type){
        case 'increment':
            return state + action.value
            case 'decrement':
                return state - action.value
                case 'reset':
                    return initialState
                    default:
                        return state
    }

}


const CounterTwo = () => {

    const[count,dispatch] = useReducer(reducer,initialState)
    const[countTwo,dispatchTwo] = useReducer(reducer,initialState)
  return (
    <>
   <div>First Counter:{count}</div>
    <div>
      <button onClick={()=>dispatch({type:'increment',value:1})}>increment</button>
      <button onClick={()=>dispatch({type:'decrement',value:1})}>decrement</button>
      <button onClick={()=>dispatch({type:'reset',})}>Reset</button>
    </div>
    <div> Second Counter:{countTwo}</div>
    <div>
      <button onClick={()=>dispatchTwo({type:'increment',value:1})}>increment</button>
      <button onClick={()=>dispatchTwo({type:'decrement',value:1})}>decrement</button>
      <button onClick={()=>dispatchTwo({type:'reset'})}>Reset</button>
    </div>
    </>
  )
}

export default CounterTwo

                 -----useReducer  + useContext-----
                  ----- for global state management----


import React,{useReducer} from "react"
import './App.css';
import ComponentA from "./Components/ComponentA";
import ComponentB from "./Components/ComponentB";
import ComponentC from "./Components/ComponentC";

export const CountContext = React.createContext()


const initialState=0
const reducer=(state,action)=>{
    switch(action){
        case 'increment':
            return state +1
            case 'decrement':
                return state -1
                case 'reset':
                    return initialState
                    default:
                        return state
    }

}


function App() {
  const[count,dispatch]=useReducer(reducer,initialState)
  return (
    <CountContext.Provider value={{countState:count ,countDispatch:dispatch}}>
    <div className="App">
 
  <ComponentA/>
  <ComponentB/>
  <ComponentC/>
    </div>
    </CountContext.Provider>
  );
}

export default App;



import React,{useContext} from 'react'
import {CountContext} from '../App'

const ComponentA = () => {
/* Getting the value from the context. */
  const countContext = useContext(CountContext)

  return (
    <div>
      counter A - {countContext.countState}
      
      <button onClick={()=>countContext.countDispatch('increment')}>increment</button>
      <button onClick={()=>countContext.countDispatch('decrement')}>decrement</button>
      <button onClick={()=>countContext.countDispatch('reset')}>Reset</button>
    </div>
  )
}

export default ComponentA


                             --------useRef-----------

import React from 'react'

const userRef=React.createRef();

const UseRefDemo = () => {
const focusinput =()=>{
    userRef.current.value="Apeksha"
}
  return (
    <div>
      <input ref={userRef} type="text" name="user"/>
      <button onClick={focusinput}>Focus</button>
    </div>
  )
}

export default UseRefDemo


import React,{useEffect,useRef} from 'react'

const UseRefDemo = () => {
    const inputRef = useRef(null)
    useEffect(()=>{
   inputRef.current.focus()
    },[])
  return (
    <div>
      <input ref={inputRef} type="text" name="user"/>
{/*       <button onClick={focusinput}>Focus</button> */}
    </div>
  )
}

export default UseRefDemo


import React, { useEffect, useRef, useState } from 'react'

const UseRefDemo = () => {
    const [timer, setTimer] = useState(0)
    const intervalRef = useRef()
    useEffect(() => {
    intervalRef.current=setInterval(()=>{
    setTimer(prevTimer =>prevTimer+1)
  },1000)
  return()=>{
  clearInterval(intervalRef.current)
  }
    },[])
    return (
        <div>
              Timer :  {timer}
              <button onClick={()=>clearInterval(intervalRef.current)}>Clear Timer</button>
        </div>
    )
}

export default UseRefDemo

                   --------------useMemo---------------

import React ,{useState,useMemo}from 'react'

const UseMemoDemo = () => {
    const[counterOne,setCounterOne]=useState(0)
    const[counterTwo,setCounterTwo]=useState(0)
    const incrementOne = ()=>{
        setCounterOne(counterOne+1)
    }
    const incrementTwo = ()=>{
        setCounterTwo(counterTwo+1)
    }
    const isEven = useMemo(() =>{
    //    let i=0
    //    while(i<2000000000)i++
        return counterOne % 2 ===0
    },[counterOne])
  return (
  <>
    <div>
      <button onClick={incrementOne}>Count One - {counterOne}</button>
      <span>{isEven?'Even':'Odd'}</span>
    </div>
    <div>
      <button onClick={incrementTwo}>Count One - {counterTwo}</button>
     
    </div>
    </>
  )
}

export default UseMemoDemo
                   